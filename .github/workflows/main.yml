name: fhir-pipe

on: [push]

jobs:
  tests:
    name: Lint and test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"
      - name: Install dependencies
        run: |
          # postgres is required to build fhir-pipe
          sudo apt update
          sudo apt install postgresql libpq-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 fhirpipe --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 fhirpipe --count --max-complexity=10 --max-line-length=100 --statistics
      - name: Test with pytest
        env:
          MIMIC_USER: ${{ secrets.MIMIC_USER }}
          MIMIC_PASSWORD: ${{ secrets.MIMIC_PASSWORD }}
        run: |
          docker-compose -f docker-compose.test.yml up -d
          ./scripts/wait_for_db.sh localhost 5431 mockdb mockdb mockdb
          python -m pytest -svv test/

  publish:
    name: Build and publish
    runs-on: ubuntu-18.04

    needs: tests
    if: github.ref == 'refs/heads/master'

    env:
      GITHUB_REGISTRY: docker.pkg.github.com
      IMAGE: arkhn/fhir-pipe
    steps:
      - uses: actions/checkout@v1

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"

      - name: Build images
        run: docker build -t $IMAGE .

      - name: Tag images
        run: |
          docker tag $IMAGE $IMAGE:latest
          docker tag $IMAGE $IMAGE:$GITHUB_SHA
          docker tag $IMAGE $GITHUB_REGISTRY/${{ github.repository }}/fhir-pipe:latest
          docker tag $IMAGE $GITHUB_REGISTRY/${{ github.repository }}/fhir-pipe:$GITHUB_SHA

      - name: Publish to the docker hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" |  docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
          docker push $IMAGE:latest
          docker push $IMAGE:$GITHUB_SHA

      - name: Publish to Github Packages
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login $GITHUB_REGISTRY -u ${{ github.actor }} --password-stdin
          docker push $GITHUB_REGISTRY/${{ github.repository }}/fhir-pipe:latest
          docker push $GITHUB_REGISTRY/${{ github.repository }}/fhir-pipe:$GITHUB_SHA
